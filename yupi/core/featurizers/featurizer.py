from __future__ import annotations

import abc
from typing import List

import numpy as np

from yupi.trajectory import Trajectory


class Featurizer(abc.ABC):
    """Base class for featurizers.

    A featurizer is a class that takes a set of trajectories and returns a
    feature matrix. The feature matrix is a 2D numpy array with shape
    (n_trajs, n_features)
    """

    @property
    @abc.abstractmethod
    def count(self) -> int:
        """Number of features generated by this featurizer."""

    @abc.abstractmethod
    def featurize(self, trajs: List[Trajectory]) -> np.ndarray:
        """Featurize a list of trajectories.

        Parameters
        ----------
        trajs : List[Trajectory]
            A list of trajectories.

        Returns
        -------
        np.ndarray
            A numpy array of shape (n_trajs, n_features).
        """

    def __add__(self, other: Featurizer) -> CompundFeaturizer:
        return self.append(other)

    def append(self, other: Featurizer) -> CompundFeaturizer:
        """Append another featurizer to this one.

        Parameters
        ----------
        other : Featurizer
            The featurizer to append.

        Returns
        -------
        CompundFeaturizer
            A new featurizer that is the concatenation of this one and the
            other one.
        """
        return CompundFeaturizer([self, other])


class CompundFeaturizer(Featurizer):
    """Gather multiple featurizers into one."""

    def __init__(self, featurizers: List[Featurizer]):
        self.featurizers = featurizers
        self._count = sum(f.count for f in featurizers)

    @property
    def count(self) -> int:
        """Number of features generated by this featurizer."""
        return self._count

    def featurize(self, trajs: List[Trajectory]) -> np.ndarray:
        """Featurize a list of trajectories.

        Parameters
        ----------
        trajs : List[Trajectory]
            A list of trajectories.

        Returns
        -------
        np.ndarray
            A numpy array of shape (n_traj, n_features).
        """
        feats = np.empty((len(trajs), self.count))
        idx = 0
        for featurizer in self.featurizers:
            feats[:, idx : idx + featurizer.count] = featurizer.featurize(trajs)
            idx += featurizer.count
        return feats
